# -*- coding: utf-8 -*-
"""Covid19_cases_prediction.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qZRiZh17SPjkIaiCRAaVDg1pR8rWejpT
"""

# Edited on 24 June 2022

from module_covid_cases import EDA, ModelCreation, PlotGraph, ErrorResults
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import plot_model
from tensorflow.keras import Input

from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import datetime
import pickle
import os

#%% Statics
COVID_PATH = os.path.join(os.getcwd(),'cases_malaysia_train.csv')
COVID_TEST_PATH = os.path.join(os.getcwd(),'cases_malaysia_test.csv')
MMS_PATH = os.path.join(os.getcwd(),'mms.pkl')
log_dir = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
LOG_FOLDER_PATH = os.path.join(os.getcwd(),'Covid_logs', log_dir)

# EDA 
#%% Step1 - Data Loading
df = pd.read_csv(COVID_PATH,na_values = [' ','?'])
test_df = pd.read_csv(COVID_TEST_PATH,na_values = ' ')

#%% Step2 - Data Inspection/Visualization
# For train dataset
df.head(10)
df.tail(10)
df.info()
df.describe().T

df.columns #names of the columns

ed = EDA()
ed.plot_graph_train(df)

df.isna().sum() # there is 12 NaN value in 'cases_new' column

# For test dataset
test_df.head(10)
test_df.tail(10)
test_df.info()
test_df.describe().T

test_df.columns #names of the columns

ed.plot_graph_test(test_df)

test_df.isna().sum() # there is 1 NaN value in 'cases_new' column

#%% Step3 - Data Cleaning
# Since this is a time series data, interpolate() will be used to impute NaN

# For train dataset
df = df['cases_new'].interpolate() 
df.isna().sum()
df = pd.DataFrame(df)


# For test dataset
test_df = test_df['cases_new'].interpolate() 
test_df.isna().sum()
test_df = pd.DataFrame(test_df)

#%% Step4 - Features Selection
# In this model, we are only selecting the cases_new 

#%% Step5 - Data Preprocessing
mms = MinMaxScaler()
df = mms.fit_transform(np.expand_dims(df['cases_new'],axis=-1))
test_df = mms.transform(np.expand_dims(test_df['cases_new'].values,axis=-1))

with open(MMS_PATH,'wb') as file:
  pickle.dump(mms,file)

X_train = []
y_train = []

win_size = 30

for i in range(win_size,np.shape(df)[0]): #or df.shape[0]
  X_train.append(df[i-win_size:i,0]) 
  y_train.append(df[i,0]) # i because to predict the next day, '30'

X_train = np.array(X_train)
y_train = np.array(y_train)

#%% Model Development
mc = ModelCreation()
model = mc.model_development(X_train, num_node=64, drop_rate=0.2, 
                             output_node=1)

model.compile(optimizer='adam',loss='mse',metrics='mape')

# Visualizing the model development
plot_model(model, to_file='model_plot.png', show_shapes=True, 
           show_layer_names=True)

# Callbacks
tensorboard_callback = TensorBoard(log_dir=LOG_FOLDER_PATH)

hist = model.fit(X_train,y_train,
          epochs=100, batch_size=32, callbacks=[tensorboard_callback])

#%% Plotting the graph 
hist.history.keys()

plt.figure()
plt.plot(hist.history['mape'])
plt.show()

plt.figure()
plt.plot(hist.history['loss'])
plt.show()

#%% MOdel deployment and analysis

con_test = np.concatenate((df,test_df),axis=0)
con_test = con_test[-130:]

X_test = []
for i in range(win_size,len(con_test)):  #30,100
  X_test.append(con_test[i-win_size:i,0])

X_test = np.array(X_test)

predicted = model.predict(np.expand_dims(X_test,axis=-1))

#%% plotting of graphs
pg = PlotGraph()
pg.plot_result(test_df,predicted,mms)

#%% MSE, MAPE

er = ErrorResults()
er.final_results(test_df,predicted)

# Discussion

# This model can predict the trend of the covid-19 cases
# Despite error is around mean absolute error of 7% and error is only
# around 15% for MAPE when tested against testing dataset.


# Other method for MAPE
# from sklearn.metrics import mean_absolute_error
# print((mean_absolute_error(test_df, predicted)/sum(abs(test_df))) *100)